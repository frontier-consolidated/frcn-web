# Scalars

scalar Timestamp
scalar Object

# Enums

enum CacheControlScope {
	PUBLIC
	PRIVATE
}

enum EventAccessType {
	EVERYONE
	PRIMARY_ROLE
	SELECT_ROLES
	CHANNEL
}

enum EventState {
	NONE
	STARTED
	ENDED
	ARCHIVED
}

# Directives

directive @cacheControl(
	maxAge: Int
	scope: CacheControlScope
	inheritMaxAge: Boolean
) on FIELD_DEFINITION | OBJECT | INTERFACE | UNION

"""
Enforces a field as requiring the given permission
"""
directive @permission(has: Permission, one: [Permission!], all: [Permission!]) on FIELD_DEFINITION

# Types

type SystemSettings {
	discordGuild: DiscordGuild!
	defaultEventChannel: EventChannel
}

type AccessKey {
	id: Int!
	key: String
	description: String!
	permissions: Int!
	updatedAt: Timestamp!
	createdAt: Timestamp!
}

type UserRole {
	id: ID!
	name: String!
	discordId: String
	primary: Boolean!
	default: Boolean!
	permissions: Int! @permission(has: ManageRoles)
	users: [User!]! @permission(has: ManageRoles)
	updatedAt: Timestamp!
	createdAt: Timestamp!
}

type UserStatus {
	activity: String
	ship: String
	updatedAt: Timestamp!
}

type UserSettings {
	updatedAt: Timestamp!
}

type User {
	id: ID!
	name: String!
	scName: String
	discordId: ID!
	discordName: String!
	discordUsername: String!
	verified: Boolean!
	avatarUrl: String!
	updatedAt: Timestamp!
	createdAt: Timestamp!

	permissions: Int!
	primaryRole: UserRole!
	roles: [UserRole!]!
	rsvps: [EventRsvp!]!
	events: [Event!]!
	status: UserStatus!
	settings: UserSettings!
}

type EventRsvpRole {
	id: ID!
	name: String!
	emoji: DiscordEmoji!
	limit: Int!
	members: [ID!]!
}

type EventRsvp {
	invite: Boolean!
	rsvp: EventRsvpRole
	event: Event!
	rsvpAt: Timestamp!
}

type EventMember {
	id: ID!
	pending: Boolean!
	user: User
	team: EventTeam
	rsvp: ID
	rsvpAt: Timestamp!
}

type EventSettings {
	createEventThread: Boolean!
	createThreadsForRoles: Boolean!
	hideLocation: Boolean!
	inviteOnly: Boolean!
	openToJoinRequests: Boolean!
}

type EventTeam {
	id: ID!
	name: String!
	members: [EventMember!]!
	event: Event!
}

type Event {
	id: ID!
	channel: EventChannel
	owner: User
	name: String!
	summary: String!
	description: String!
	imageUrl: String
	eventType: String
	location: [String!]
	startAt: Timestamp
	endedAt: Timestamp
	duration: Int
	state: EventState!
	posted: Boolean!
	archived: Boolean!
	archivedAt: Timestamp
	updatedAt: Timestamp!
	createdAt: Timestamp!

	rsvp: EventMember
	roles: [EventRsvpRole!]!
	members: [EventMember!]!
	teams: [EventTeam!]!
	mentions: [ID!]! @permission(one: [CreateEvents, ManageEvents])
	settings: EventSettings! @permission(one: [CreateEvents, ManageEvents])
	accessType: EventAccessType! @permission(one: [CreateEvents, ManageEvents])
	accessRoles: [UserRole!]! @permission(one: [CreateEvents, ManageEvents])
}

type EventChannel {
	id: Int!
	discordGuild: DiscordGuild!
	discord: DiscordChannel!
	discordCategory: DiscordChannel
	readyRoomName: String
	events: [Event!]! @permission(has: ManageSystem)
}

type DiscordGuild {
	id: ID!
	name: String!
}

type DiscordChannel {
	id: ID!
	name: String!
	type: String
	parentId: ID
	sendMessages: Boolean!
}

type DiscordRole {
	id: ID!
	name: String!
	color: String!
}

type DiscordEmoji {
	id: ID!
	name: String!
	image: String
}

type DiscordEmojis {
	serverName: String!
	serverAvatar: String
	emojis: [DiscordEmoji!]!
}

type Resource {
	id: ID!
	owner: User
	name: String!
	sizeKb: Int!
	shortDescription: String!
	previewUrl: String
	downloadUrl: String
	tags: [String!]!
	updatedAt: Timestamp!
	createdAt: Timestamp!
}

type ContentContainer {
	id: ID!
	identifier: String
	type: String!
	title: String!
	content: String
	files: [ContentContainerFile!]!
	children: [ContentContainer!]!
	recursiveChildren: [Object!]!
	parent: ContentContainer
}

type ContentContainerFile {
	id: ID!
	identifier: String
	fileName: String!
	fileSizeKb: Int!
	contentType: String!
	previewUrl: String
}

# Inputs:

input UserStatusEditInput {
	activity: String @constraint(maxLength: 255)
	ship: String @constraint(maxLength: 255)
}

input EventFilterInput {
	search: String @constraint(maxLength: 255)
	eventType: String
	minStartAt: Timestamp
	maxStartAt: Timestamp
	minDuration: Int @constraint(min: 0)
	maxDuration: Int @constraint(min: 0)
	includeCompleted: Boolean
}

input EventSettingsInput {
	createEventThread: Boolean
	createThreadsForRoles: Boolean
	hideLocation: Boolean
	inviteOnly: Boolean
	openToJoinRequests: Boolean
}

input EventRoleInput {
	id: ID!
	name: String! @constraint(minLength: 1, maxLength: 128)
	emoji: String!
	emojiId: String!
	limit: Int! @constraint(min: 0)
}

input EventEditInput {
	channel: Int
	name: String @constraint(minLength: 1, maxLength: 255)
	summary: String @constraint(minLength: 1, maxLength: 255)
	description: String @constraint(maxLength: 2048)
	imageUrl: String @constraint(format: "url", maxLength: 2084)
	eventType: String
	location: [String!]
	startAt: Timestamp
	duration: Int @constraint(min: 0)
	roles: [EventRoleInput!]
	mentions: [ID!]
	settings: EventSettingsInput
	accessType: EventAccessType
	accessRoles: [ID!]
}

input EventTeamEditInput {
	name: String @constraint(maxLength: 255)
}

input UserFilterInput {
	search: String @constraint(maxLength: 255)
}

input SystemEditInput {
	discordGuildId: ID
	defaultEventChannelId: Int
}

input AccessKeyEditInput {
	description: String @constraint(maxLength: 255)
	permissions: Int @constraint(min: 0, max: 2147483647)
}

input EventChannelEditInput {
	guildId: ID
	channelId: ID
	categoryId: ID
	readyRoomName: String @constraint(maxLength: 255)
}

input RoleEditInput {
	name: String @constraint(minLength: 1, maxLength: 128)
	primary: Boolean
	newPrimaryRole: ID

	discordId: ID
	permissions: Int @constraint(min: 0, max: 2147483647)
}

input ResourceFilterInput {
	search: String @constraint(maxLength: 255)
	tags: [String!]
}

input ResourceCreateInput {
	name: String! @constraint(maxLength: 255)
	shortDescription: String! @constraint(maxLength: 512)
	tags: [String!]!
}

input ResourceEditInput {
	name: String @constraint(maxLength: 255)
	shortDescription: String @constraint(maxLength: 512)
	tags: [String!]
}

input ContentContainerEditInput {
	identifier: String @constraint(maxLength: 255)
	title: String @constraint(maxLength: 255)
	content: String @constraint(maxLength: 2048)
}

input ContentContainerFileEditInput {
	identifier: String @constraint(maxLength: 255)
}

# Root types:

type Query {
	# Users
	getCurrentUser: User
	getUser(id: ID!): User
	getUserScVerifyCode: String

	# Events
	getEvent(id: ID!): Event
	getEvents(
		filter: EventFilterInput
		page: Int @constraint(min: 0)
		limit: Int @constraint(min: 1, max: 50)
	): PagedEvent

	# Resources
	getResource(id: ID!): Resource
	getResources(
		filter: ResourceFilterInput
		page: Int @constraint(min: 0)
		limit: Int @constraint(min: 1, max: 50)
	): PagedResource

	# Roles
	getRoles: [UserRole!]! @permission(one: [CreateEvents, ManageEvents, ManageRoles])
	getRole(id: ID!): UserRole @permission(has: ManageRoles)

	# System
	getAllUsers(
		filter: UserFilterInput
		page: Int @constraint(min: 0)
		limit: Int @constraint(min: 1, max: 100)
	): PagedUser! @permission(has: ManageSystem)

	getAllEventChannels: [EventChannel!]! @permission(one: [CreateEvents, ManageEvents, ManageSystem])
	getEventChannel(id: Int!): EventChannel @permission(has: ManageSystem)

	getAllDiscordGuilds: [DiscordGuild!]! @permission(has: ManageSystem)
	getAllDiscordTextChannels(guildId: ID): [DiscordChannel!]! @permission(has: ManageSystem)
	getAllDiscordVoiceChannels(guildId: ID): [DiscordChannel!]! @permission(has: ManageSystem)
	getAllDiscordCategories(guildId: ID): [DiscordChannel!]! @permission(has: ManageSystem)
	getAllDiscordEmojis: DiscordEmojis! @permission(one: [CreateEvents, ManageEvents])
	getAllDiscordRoles(guildId: ID, everyone: Boolean): [DiscordRole!]!
		@permission(one: [CreateEvents, ManageEvents, ManageRoles])
	getSystemSettings: SystemSettings! @permission(has: ManageSystem)

	getCurrentAccessKey: AccessKey
	getAccessKey(id: Int!): AccessKey @permission(has: ManageSystem)
	getAllAccessKeys: [AccessKey!]! @permission(has: ManageSystem)

	# CMS
	getContentContainer(identifier: String!, type: String!, parentId: ID): ContentContainer
		@permission(has: CmsRead)
	getContentContainerById(id: ID!): ContentContainer @permission(has: CmsRead)
	getContentContainersOfType(type: String!, parentId: ID): [ContentContainer!]!
		@permission(has: CmsRead)
}

type Mutation {
	# Users
	setUserScName(name: String!): User!
	verifyUserScName(code: String!): User!
	editUserStatus(data: UserStatusEditInput!): UserStatus!
	deleteCurrentUser: Boolean!

	# Events
	createEvent(startAt: Timestamp): ID! @permission(one: [CreateEvents, ManageEvents])
	editEvent(id: ID!, data: EventEditInput!): Event @permission(one: [CreateEvents, ManageEvents])
	postEvent(id: ID!): Boolean! @permission(one: [CreateEvents, ManageEvents])
	unpostEvent(id: ID!): Boolean! @permission(one: [CreateEvents, ManageEvents])
	endEvent(id: ID!): Boolean! @permission(one: [CreateEvents, ManageEvents])
	archiveEvent(id: ID!): Boolean! @permission(one: [CreateEvents, ManageEvents])
	deleteEvent(id: ID!): Boolean! @permission(one: [CreateEvents, ManageEvents])
	rsvpForEvent(id: ID!, rsvp: ID!): Boolean!
	unrsvpForEvent(id: ID!): Boolean!
	inviteToEvent(eventId: ID!, userId: ID!): Boolean! @permission(one: [CreateEvents, ManageEvents])
	setEventMemberTeam(member: ID!, team: ID): Boolean! @permission(one: [CreateEvents, ManageEvents])
	kickEventMember(member: ID!): Boolean! @permission(one: [CreateEvents, ManageEvents])

	createEventTeam(eventId: ID!, name: String!): EventTeam!
		@permission(one: [CreateEvents, ManageEvents])
	editEventTeam(id: ID!, data: EventTeamEditInput!): EventTeam
		@permission(one: [CreateEvents, ManageEvents])
	deleteEventTeam(id: ID!): Boolean! @permission(one: [CreateEvents, ManageEvents])

	# Resources
	createResource(data: ResourceCreateInput!): Resource!
		@permission(one: [CreateResources, ManageResources])
	editResource(id: ID!, data: ResourceEditInput!): Resource
		@permission(one: [CreateResources, ManageResources])
	deleteResource(id: ID!): Boolean! @permission(one: [CreateResources, ManageResources])

	# Roles
	createRole: ID! @permission(has: ManageRoles)
	editRole(id: ID!, data: RoleEditInput!): UserRole @permission(has: ManageRoles)
	deleteRole(id: ID!): Boolean! @permission(has: ManageRoles)
	syncRole(id: ID!): UserRole @permission(has: ManageRoles)
	reorderRoles(order: [ID!]!): [ID!]! @permission(has: ManageRoles)
	syncRoles: Boolean! @permission(has: ManageRoles)

	changeUserPrimaryRole(userId: ID!, roleId: ID!): UserRole @permission(has: ManageRoles)
	giveUserRole(userId: ID!, roleId: ID!): UserRole @permission(has: ManageRoles)
	removeUserRole(userId: ID!, roleId: ID!): Boolean! @permission(has: ManageRoles)

	# System
	editSystemSettings(data: SystemEditInput!): SystemSettings! @permission(has: ManageSystem)

	createEventChannel(
		guildId: ID!
		channelId: ID!
		categoryId: ID!
		existingReadyRoomId: ID
	): EventChannel! @permission(has: ManageSystem)
	editEventChannel(id: Int!, data: EventChannelEditInput!): EventChannel
		@permission(has: ManageSystem)
	deleteEventChannel(id: Int!, deleteVoiceChannels: Boolean): Boolean!
		@permission(has: ManageSystem)

	createAccessKey: AccessKey! @permission(has: ManageSystem)
	editAccessKey(id: Int!, data: AccessKeyEditInput!): AccessKey @permission(has: ManageSystem)
	regenerateAccessKey(id: Int!): AccessKey @permission(has: ManageSystem)
	deleteAccessKey(id: Int!): Boolean! @permission(has: ManageSystem)

	# CMS
	createContentContainer(type: String!, identifier: String, parent: ID): ContentContainer!
		@permission(has: CmsWrite)
	editContentContainer(id: ID!, data: ContentContainerEditInput!): ContentContainer
		@permission(has: CmsWrite)
	reorderContentContainerChildren(id: ID!, order: [ID!]!): ContentContainer
		@permission(has: CmsWrite)
	reorderContentContainerFiles(id: ID!, order: [ID!]!): ContentContainer @permission(has: CmsWrite)
	deleteContentContainer(id: ID!): Boolean! @permission(has: CmsWrite)
	editContentContainerFile(id: ID!, data: ContentContainerFileEditInput!): ContentContainerFile
		@permission(has: CmsWrite)
	deleteContentContainerFile(id: ID!): Boolean! @permission(has: CmsWrite)
}

# Subscriptions

type UpdatedUserRoles {
	userId: ID!
	permissions: Int!
	primaryRole: UserRole!
	roles: [UserRole!]!
}

type Subscription {
	rolesUpdated: [UserRole!]! @permission(one: [CreateEvents, ManageEvents, ManageRoles])
	userRolesUpdated(userId: ID): UpdatedUserRoles!
}
