// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  output          = "../src/__generated__/client"
  binaryTargets   = ["native", "debian-openssl-3.0.x"]
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["system", "user", "events", "cms"]
}

// System

model SystemSettings {
  id                    Int           @id @default(autoincrement())
  unique                Boolean       @unique @default(true)
  discordGuildId        String        @map("discord_guild_id")
  defaultEventChannel   EventChannel? @relation(fields: [defaultEventChannelId], references: [id])
  defaultEventChannelId Int?          @unique @map("default_event_channel_id")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  createdAt             DateTime      @default(now()) @map("created_at")

  @@index([unique])
  @@map("settings")
  @@schema("system")
}

model AccessKey {
  id          Int      @id @default(autoincrement())
  description String
  hashedKey   String   @unique @map("hashed_key")
  permissions Int
  updatedAt   DateTime @updatedAt @map("updated_at")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("access_keys")
  @@schema("system")
}

// Users

model UserSession {
  sid       String   @id
  data      String   @db.VarChar(4096)
  deviceId  String   @map("device_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String?  @map("user_id")
  expiresAt DateTime @map("expires_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("sessions")
  @@schema("user")
}

model UserSettings {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @map("user_id")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("settings")
  @@schema("user")
}

model UserStatus {
  id        Int      @id @default(autoincrement())
  activity  String?
  ship      String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String   @unique @map("user_id")
  updatedAt DateTime @updatedAt @map("updated_at")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("statuses")
  @@schema("user")
}

model UserRole {
  id                       String                        @id @default(uuid())
  name                     String
  order                    Int
  discordId                String?                       @unique @map("discord_id")
  primary                  Boolean                       @default(false)
  permissions              Int
  users                    UsersInUserRoles[]
  primaryUsers             User[]
  eventsUsingRoleForAccess EventsWithUserRoleForAccess[]
  updatedAt                DateTime                      @updatedAt @map("updated_at")
  createdAt                DateTime                      @default(now()) @map("created_at")

  @@map("roles")
  @@schema("user")
}

model User {
  id              String             @id @default(uuid())
  discordId       String             @unique @map("discord_id")
  discordName     String             @map("discord_name")
  discordUsername String             @map("discord_username")
  scName          String?            @map("sc_name")
  scVerified      Boolean            @map("sc_verified")
  scVerifyCode    String?            @map("sc_verify_code")
  avatarUrl       String             @map("avatar_url")
  primaryRole     UserRole           @relation(fields: [primaryRoleId], references: [id])
  primaryRoleId   String             @map("primary_role_id")
  roles           UsersInUserRoles[]
  rsvps           EventUser[]
  events          Event[]
  resources       Resource[]
  sessions        UserSession[]
  status          UserStatus?
  settings        UserSettings?
  fileUploads     FileUpload[]
  updatedAt       DateTime           @updatedAt @map("updated_at")
  createdAt       DateTime           @default(now()) @map("created_at")

  @@map("users")
  @@schema("user")
}

model UsersInUserRoles {
  role       UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String   @map("role_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @map("user_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([roleId, userId])
  @@map("users__roles")
  @@schema("user")
}

// Events

model EventRsvpRole {
  id              String      @id @default(uuid())
  name            String
  emoji           String
  emojiId         String      @map("emoji_id")
  limit           Int         @default(0)
  discordThreadId String?     @map("discord_thread_id")
  members         EventUser[]
  event           Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId         String      @map("event_id")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  createdAt       DateTime    @default(now()) @map("created_at")

  @@map("rsvp_roles")
  @@schema("events")
}

model EventUser {
  id        String         @id @default(uuid())
  pending   Boolean        @default(false)
  reminders String[]
  user      User?          @relation(fields: [userId], references: [id])
  userId    String?        @map("user_id")
  rsvp      EventRsvpRole? @relation(fields: [rsvpId], references: [id])
  rsvpId    String?        @map("rsvp_id")
  team      EventTeam?     @relation(fields: [teamId], references: [id])
  teamId    String?        @map("team_id")
  event     Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String         @map("event_id")
  updatedAt DateTime       @updatedAt @map("updated_at")
  createdAt DateTime       @default(now()) @map("created_at")

  @@unique([eventId, userId])
  @@map("users")
  @@schema("events")
}

model EventTeam {
  id             String            @id @default(uuid())
  name           String
  members        EventUser[]
  event          Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId        String            @map("event_id")
  voiceChannel   EventVoiceChannel @relation(fields: [voiceChannelId], references: [id], onDelete: Cascade)
  voiceChannelId Int               @unique @map("voice_channel_id")

  @@map("teams")
  @@schema("events")
}

model EventSettings {
  id                    Int      @id @default(autoincrement())
  createEventThread     Boolean  @default(true) @map("create_event_thread")
  createThreadsForRoles Boolean  @default(false) @map("create_threads_for_roles")
  hideLocation          Boolean  @map("hide_location")
  inviteOnly            Boolean  @map("invite_only")
  openToJoinRequests    Boolean  @map("open_to_join_requests")
  event                 Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId               String   @unique @map("event_id")
  updatedAt             DateTime @updatedAt @map("updated_at")
  createdAt             DateTime @default(now()) @map("created_at")

  @@map("settings")
  @@schema("events")
}

model Event {
  id                    String                        @id @default(uuid())
  owner                 User?                         @relation(fields: [ownerId], references: [id])
  ownerId               String?                       @map("owner_id")
  channel               EventChannel?                 @relation(fields: [channelId], references: [id])
  channelId             Int?                          @map("channel_id")
  discordThreadId       String?                       @map("discord_thread_id")
  discordRoleId         String?                       @map("discord_role_id")
  discordEventMessageId String?                       @map("discord_event_message_id")
  discordMentions       String[]                      @map("discord_mentions")
  remindersSent         String[]                      @map("reminders_sent")
  name                  String
  summary               String
  description           String                        @db.VarChar(2048)
  imageUrl              String?                       @map("image_url") @db.VarChar(2084)
  eventType             String?                       @map("event_type")
  location              String[]
  roles                 EventRsvpRole[]
  members               EventUser[]
  teams                 EventTeam[]
  settings              EventSettings?
  accessType            String                        @map("access_type")
  accessRoles           EventsWithUserRoleForAccess[]
  startAt               DateTime?                     @map("start_at")
  endedAt               DateTime?                     @map("ended_at")
  duration              Int?
  posted                Boolean                       @default(false)
  expired               Boolean                       @default(false)
  archived              Boolean                       @default(false)
  archivedAt            DateTime?                     @map("archived_at")
  updatedAt             DateTime                      @updatedAt @map("updated_at")
  createdAt             DateTime                      @default(now()) @map("created_at")

  @@index([startAt, posted])
  @@map("events")
  @@schema("events")
}

model EventsWithUserRoleForAccess {
  role       UserRole @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId     String   @map("role_id")
  event      Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String   @map("event_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([roleId, eventId])
  @@map("events__user_roles")
  @@schema("events")
}

model EventChannel {
  id                       Int                 @id @default(autoincrement())
  discordGuildId           String?             @map("discord_guild_id")
  discordId                String              @unique @map("discord_id")
  discordCategoryId        String              @map("discord_category_id")
  discordCalendarMessageId String?             @map("discord_calendar_message_id")
  readyRoomName            String?             @map("ready_room_name")
  events                   Event[]
  voiceChannels            EventVoiceChannel[]
  systemSettings           SystemSettings?
  updatedAt                DateTime            @updatedAt @map("updated_at")
  createdAt                DateTime            @default(now()) @map("created_at")

  @@map("channels")
  @@schema("events")
}

model EventVoiceChannel {
  id        Int          @id @default(autoincrement())
  discordId String       @map("discord_id")
  channel   EventChannel @relation(fields: [channelId], references: [id], onDelete: Cascade)
  channelId Int          @map("channel_id")
  readyRoom Boolean      @default(false) @map("ready_room")
  team      EventTeam?   @relation()
  teamId    String?      @map("team_id")
  updatedAt DateTime     @updatedAt @map("updated_at")
  createdAt DateTime     @default(now()) @map("created_at")

  @@map("voice_channels")
  @@schema("events")
}

// CMS

model FileUpload {
  id            String                 @id @default(uuid())
  key           String
  owner         User?                  @relation(fields: [ownerId], references: [id])
  ownerId       String?                @map("owner_id")
  fileName      String                 @map("file_name")
  fileSizeKb    Int                    @map("file_size_kb")
  contentType   String                 @map("content_type")
  resources     Resource[]
  cmsContainers ContentContainerFile[]
  updatedAt     DateTime               @updatedAt @map("updated_at")
  createdAt     DateTime               @default(now()) @map("created_at")

  @@map("file_uploads")
  @@schema("cms")
}

model Resource {
  id               String      @id @default(uuid())
  owner            User?       @relation(fields: [ownerId], references: [id])
  ownerId          String?     @map("owner_id")
  name             String
  shortDescription String      @map("short_description") @db.VarChar(512)
  tags             String[]
  canPreview       Boolean     @default(false) @map("can_preview")
  file             FileUpload? @relation(fields: [fileId], references: [id])
  fileId           String?     @map("file_id")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  createdAt        DateTime    @default(now()) @map("created_at")

  @@map("resources")
  @@schema("cms")
}

model ContentContainer {
  id            String                 @id @default(uuid())
  identifier    String?
  type          String
  title         String                 @default("")
  content       String?                @db.VarChar(2048)
  files         ContentContainerFile[]
  filesOrder    String[]               @map("files_order")
  children      ContentContainer[]     @relation(name: "container_hierarchy")
  childrenOrder String[]               @map("children_order")
  parent        ContentContainer?      @relation(name: "container_hierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId      String?                @map("parent_id")
  updatedAt     DateTime               @updatedAt @map("updated_at")
  createdAt     DateTime               @default(now()) @map("created_at")

  @@index([parentId])
  @@map("container")
  @@schema("cms")
}

model ContentContainerFile {
  id          String           @id @default(uuid())
  identifier  String?
  container   ContentContainer @relation(fields: [containerId], references: [id], onDelete: Cascade)
  containerId String           @map("container_id")
  file        FileUpload       @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId      String           @map("file_id")

  @@map("container__file_uploads")
  @@schema("cms")
}
